// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/discover/discover.go

// Package mock_discover is a generated GoMock package.
package mock_discover

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockRepo is a mock of Repo interface
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// ExistsByID mocks base method
func (m *MockRepo) ExistsByID(ctx context.Context, db, collection string, id primitive.ObjectID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByID", ctx, db, collection, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByID indicates an expected call of ExistsByID
func (mr *MockRepoMockRecorder) ExistsByID(ctx, db, collection, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByID", reflect.TypeOf((*MockRepo)(nil).ExistsByID), ctx, db, collection, id)
}

// ListDatabases mocks base method
func (m *MockRepo) ListDatabases(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabases", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabases indicates an expected call of ListDatabases
func (mr *MockRepoMockRecorder) ListDatabases(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockRepo)(nil).ListDatabases), ctx)
}

// ListCollections mocks base method
func (m *MockRepo) ListCollections(ctx context.Context, db string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollections", ctx, db)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollections indicates an expected call of ListCollections
func (mr *MockRepoMockRecorder) ListCollections(ctx, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollections", reflect.TypeOf((*MockRepo)(nil).ListCollections), ctx, db)
}

// SampleCollection mocks base method
func (m *MockRepo) SampleCollection(ctx context.Context, db, collection string, size int) ([]primitive.M, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleCollection", ctx, db, collection, size)
	ret0, _ := ret[0].([]primitive.M)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SampleCollection indicates an expected call of SampleCollection
func (mr *MockRepoMockRecorder) SampleCollection(ctx, db, collection, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleCollection", reflect.TypeOf((*MockRepo)(nil).SampleCollection), ctx, db, collection, size)
}
